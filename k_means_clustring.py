# -*- coding: utf-8 -*-
"""K_means_Clustring_Ashwin_June (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1stOw4_geTx_AddkFi34WzPEUC1q1i1W_
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""
"encoding" refers to the way characters are represented in a digital format, typically for storage or transmission. The encoding process maps characters from
a character set (such as letters, numbers, and symbols) to specific binary codes (numbers).UTF-8

"""

df=pd.read_csv("/content/circket (1) (1).csv",encoding="latin")

df

df.info()

# i will divide the data of span column into two parts start and end column wrt on "-"

df[["start","end"]]=df["Span"].str.split("-",expand=True) # divide data based on "-"

df

df.dtypes

df["start"]=df["start"].astype(int)
df["end"]=df["end"].astype(int)

df.dtypes

# create another new column called experience

df["Exp"]=df["end"]-df["start"]

df

# Since i have a new exp column we do not need span end and start columns, so we can drop them

df.drop(columns=["Span","start","end"],axis=1,inplace=True)

df.shape

# In HS column i have * for Not out, i need to replace them, i will replace "*" with ""
df["HS"]=df["HS"].str.replace("*","")
df["HS"].dtypes

df["HS"]=df["HS"].astype(int)

df.info()

df.isnull().sum()

df.duplicated().sum()

# drop_duplicates()

df.info()

df

for i in df.columns:
  if df[i].dtype!="object":
    print(i)

for i in df.columns:
  if df[i].dtype!="object":
    sns.boxplot(df[i])
    plt.title(i)
    plt.show()

# Since the Dataframe having less number of rows ie 79 and also all these columns are expected to have outliers as they depend on individual players



# Lets create the copy of the data frame and remove player column

df_copy=df.copy()
df_copy

df_copy.drop(["Player"],axis=1,inplace=True)

df_copy

# Standardization - Each value in the data set is adjusted by substracting to mean and then dividing by the STD DEV

from sklearn.preprocessing import StandardScaler

se=StandardScaler()

df_scaled=se.fit_transform(df_copy)

#df_scaled

df_scaled=pd.DataFrame(df_scaled,columns=df_copy.columns) # Creating a data frame from Standardized Values
df_scaled # new data frame ie Scaled version of df_copy

# Model building

df_scaled["Runs"].mean()  #0.0000000000000000012

df_scaled["Runs"].std()

"""

```
# This is formatted as code
```

**K Means Clustring**"""

df # the old data set

df_copy # one without player name column



from sklearn.cluster import KMeans

k_values=[2,3,4,5,6,7] # posible k values

ssd=[]

for k in k_values:
  km=KMeans(n_clusters=k,max_iter=150,random_state=32)
  km.fit(df_scaled)
  ssd.append(km.inertia_) #ssd ( sum of squared distance ) or inertia_ both measure how well the data points fit into their assigned clusters

plt.plot(k_values,ssd)

from sklearn.metrics import silhouette_score

k_values = range(2, 8) #[2,3,4,5,6,7]

silhouette_scores = []

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=32)
    kmeans.fit(df_scaled)

    silhouette_avg = silhouette_score(df_scaled, kmeans.labels_)
    silhouette_scores.append(silhouette_avg)


plt.plot(k_values, silhouette_scores, marker='o', color='green')
plt.title('Silhouette Score vs. k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')

"""4 will be considered as number of clusters as 4 has sharper bend
and between 4 and 5 if any confusions after elbow curve, 4 has higher silhouette score than 5
"""

# lets build the final model

kmodel=KMeans(n_clusters=4,max_iter=150,random_state=32)
kmodel.fit(df_scaled)

print(kmodel.labels_) # this will assign each data point into 4 diffrent clusters we have created

df["ClusterID"]=kmodel.labels_
df

group1=df[df["ClusterID"]==2]
group1

group2=df[df["ClusterID"]==3]
group2

# Plot the clusters created
plt.figure(figsize=(10,6))
sns.scatterplot(data=df , x="Runs", y ="Ave" , hue="ClusterID" , palette="Set1" , s=150)
plt.title("This plot will show how crickets are clustered based on their Runs and Average")
plt.show()

pip install plotly

import plotly.express as px

# Create a 3d scatter plot
fig = px.scatter_3d(df , x="Runs" , y="Ave" , z="SR" ,color="ClusterID" ,hover_name = "Player" , title ="3D Scatter plot of cricker performance " )

# Update layout for better visulization

fig.update_layout( scene = dict( xaxis_title="Runs" , yaxis_title="Average" , zaxis_title="Strike Rate"), width = 800 , height = 600)

fig.show()

